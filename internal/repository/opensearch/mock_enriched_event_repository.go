// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package opensearch is a generated GoMock package.
package opensearch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/openshift-assisted/assisted-events-streams/internal/types"
	kafka "github.com/segmentio/kafka-go"
)

// MockEnrichedEventRepositoryInterface is a mock of EnrichedEventRepositoryInterface interface.
type MockEnrichedEventRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichedEventRepositoryInterfaceMockRecorder
}

// MockEnrichedEventRepositoryInterfaceMockRecorder is the mock recorder for MockEnrichedEventRepositoryInterface.
type MockEnrichedEventRepositoryInterfaceMockRecorder struct {
	mock *MockEnrichedEventRepositoryInterface
}

// NewMockEnrichedEventRepositoryInterface creates a new mock instance.
func NewMockEnrichedEventRepositoryInterface(ctrl *gomock.Controller) *MockEnrichedEventRepositoryInterface {
	mock := &MockEnrichedEventRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockEnrichedEventRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichedEventRepositoryInterface) EXPECT() *MockEnrichedEventRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEnrichedEventRepositoryInterface) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockEnrichedEventRepositoryInterfaceMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEnrichedEventRepositoryInterface)(nil).Close), ctx)
}

// Store mocks base method.
func (m *MockEnrichedEventRepositoryInterface) Store(ctx context.Context, enrichedEvent *types.EnrichedEvent, msg *kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, enrichedEvent, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockEnrichedEventRepositoryInterfaceMockRecorder) Store(ctx, enrichedEvent, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEnrichedEventRepositoryInterface)(nil).Store), ctx, enrichedEvent, msg)
}

// MockProjectionConfigRepositoryInterface is a mock of ProjectionConfigRepositoryInterface interface.
type MockProjectionConfigRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectionConfigRepositoryInterfaceMockRecorder
}

// MockProjectionConfigRepositoryInterfaceMockRecorder is the mock recorder for MockProjectionConfigRepositoryInterface.
type MockProjectionConfigRepositoryInterfaceMockRecorder struct {
	mock *MockProjectionConfigRepositoryInterface
}

// NewMockProjectionConfigRepositoryInterface creates a new mock instance.
func NewMockProjectionConfigRepositoryInterface(ctrl *gomock.Controller) *MockProjectionConfigRepositoryInterface {
	mock := &MockProjectionConfigRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockProjectionConfigRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectionConfigRepositoryInterface) EXPECT() *MockProjectionConfigRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProjectionConfigRepositoryInterface) Get(ctx context.Context) types.ProjectionConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(types.ProjectionConfig)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockProjectionConfigRepositoryInterfaceMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectionConfigRepositoryInterface)(nil).Get), ctx)
}
