// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package stream is a generated GoMock package.
package stream

import (
	context "context"
	reflect "reflect"

	strfmt "github.com/go-openapi/strfmt"
	gomock "github.com/golang/mock/gomock"
)

// MockNotifiable is a mock of Notifiable interface.
type MockNotifiable struct {
	ctrl     *gomock.Controller
	recorder *MockNotifiableMockRecorder
}

// MockNotifiableMockRecorder is the mock recorder for MockNotifiable.
type MockNotifiableMockRecorder struct {
	mock *MockNotifiable
}

// NewMockNotifiable creates a new mock instance.
func NewMockNotifiable(ctrl *gomock.Controller) *MockNotifiable {
	mock := &MockNotifiable{ctrl: ctrl}
	mock.recorder = &MockNotifiableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifiable) EXPECT() *MockNotifiableMockRecorder {
	return m.recorder
}

// GetClusterID mocks base method.
func (m *MockNotifiable) GetClusterID() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterID")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetClusterID indicates an expected call of GetClusterID.
func (mr *MockNotifiableMockRecorder) GetClusterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterID", reflect.TypeOf((*MockNotifiable)(nil).GetClusterID))
}

// GetHostID mocks base method.
func (m *MockNotifiable) GetHostID() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostID")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetHostID indicates an expected call of GetHostID.
func (mr *MockNotifiableMockRecorder) GetHostID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostID", reflect.TypeOf((*MockNotifiable)(nil).GetHostID))
}

// GetInfraEnvID mocks base method.
func (m *MockNotifiable) GetInfraEnvID() *strfmt.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfraEnvID")
	ret0, _ := ret[0].(*strfmt.UUID)
	return ret0
}

// GetInfraEnvID indicates an expected call of GetInfraEnvID.
func (mr *MockNotifiableMockRecorder) GetInfraEnvID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfraEnvID", reflect.TypeOf((*MockNotifiable)(nil).GetInfraEnvID))
}

// NotificationType mocks base method.
func (m *MockNotifiable) NotificationType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationType")
	ret0, _ := ret[0].(string)
	return ret0
}

// NotificationType indicates an expected call of NotificationType.
func (mr *MockNotifiableMockRecorder) NotificationType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationType", reflect.TypeOf((*MockNotifiable)(nil).NotificationType))
}

// Payload mocks base method.
func (m *MockNotifiable) Payload() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(any)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockNotifiableMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockNotifiable)(nil).Payload))
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNotifier) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockNotifierMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNotifier)(nil).Close))
}

// Notify mocks base method.
func (m *MockNotifier) Notify(ctx context.Context, notifiable Notifiable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, notifiable)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotifierMockRecorder) Notify(ctx, notifiable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), ctx, notifiable)
}
