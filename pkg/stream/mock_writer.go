// Code generated by MockGen. DO NOT EDIT.
// Source: writer.go

// Package stream is a generated GoMock package.
package stream

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// WriteMessages mocks base method.
func (m *MockProducer) WriteMessages(ctx context.Context, msgs ...kafka.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockProducerMockRecorder) WriteMessages(ctx interface{}, msgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, msgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockProducer)(nil).WriteMessages), varargs...)
}

// MockEventStreamWriter is a mock of EventStreamWriter interface.
type MockEventStreamWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEventStreamWriterMockRecorder
}

// MockEventStreamWriterMockRecorder is the mock recorder for MockEventStreamWriter.
type MockEventStreamWriterMockRecorder struct {
	mock *MockEventStreamWriter
}

// NewMockEventStreamWriter creates a new mock instance.
func NewMockEventStreamWriter(ctrl *gomock.Controller) *MockEventStreamWriter {
	mock := &MockEventStreamWriter{ctrl: ctrl}
	mock.recorder = &MockEventStreamWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStreamWriter) EXPECT() *MockEventStreamWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventStreamWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEventStreamWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventStreamWriter)(nil).Close))
}

// Write mocks base method.
func (m *MockEventStreamWriter) Write(ctx context.Context, key []byte, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockEventStreamWriterMockRecorder) Write(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEventStreamWriter)(nil).Write), ctx, key, value)
}
